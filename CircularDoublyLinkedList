package CircularDoubleLinkedList;

class CircularDoublyLinkedList{
    private Node head=null;
    
    private class Node{
        int data;
        Node next;
        Node prev;
        
        Node(int data){
            this.data=data;
        }
    }
    
    public void addFirst(int data){
        Node newNode = new Node(data);
        if(head==null){
            head=newNode;
            head.next=head;
            head.prev=head;
        }else{
            Node tail=head.prev;
            
            newNode.next=head;
            newNode.prev=tail;
            head.prev=newNode;
            tail.next=newNode;
            head=newNode;
        }
    }
    public void addLast(int data){
        if(head==null){
            addFirst(data);
        }else{
            Node newNode=new Node(data);
            Node tail=head.prev;
            
            tail.next=newNode;
            newNode.prev=tail;
            newNode.next=head;
            head.prev=newNode;
        }
    }
    public void addAtIndex(int index, int data){
        if(index==0){
            addFirst(data);
            return;
        }
        Node newNode=new Node(data);
        Node current=head;
        
        for(int i=0; i<index-1; i++){
            current=current.next;
            if(current==head){
                System.out.println("Index out of bounds");
                return;
            }
        }
        Node nextNode=current.next;
        
        current.next=newNode;
        newNode.prev=current;
        newNode.next=nextNode;
        nextNode.prev=newNode;
    }
    public void removeFirst(){
        if(head==null)return;
        
        if(head.next==head){
            head=null;
            return;
        }
        Node tail=head.prev;
        head=head.next;
        head.prev=tail;
        tail.next=head;
    }
    public void removeLast(){
        if(head==null)return;
        
        if(head.next==head){
            head=null;
            return;
        }
        Node tail=head.prev;
        Node newTail=tail.prev;
        
        newTail.next=head;
        head.prev=newTail;
    }
    public void removeAtIndex(int index){
        if(head==null)return;
        
        if(index==0){
            removeFirst();
            return;
        }
        Node current=head;
        
        for(int i=0; i<index; i++){
            current=current.next;
            if(current==head){
                System.out.println("Index out bounds");
                return;
            }
        }
        current.prev.next=current.next;
        current.next.prev=current.prev;
    }
    public void display(){
        if(head==null){
            System.out.println("List is empty");
            return;
        }
        Node temp=head;
        System.out.print("List: ");
        do{
            System.out.print(temp.data+ " ");
            temp=temp.next;
        }while(temp!=head);
        System.out.println();
    }
    public void displayReverse(){
        if(head==null){
            System.out.println("List is empty");
            return;
        }
        Node tail=head.prev;
        Node temp=tail;
        System.out.print("Reverse List: ");
        do{
            System.out.print(temp.data+ " ");
            temp=temp.prev;
        }while(temp!=tail);
        System.out.println();
    }
    
}

public class CircularDoubleLinkedList {

    public static void main(String[] args) {
        CircularDoublyLinkedList list=new CircularDoublyLinkedList();
        list.addFirst(10);
        list.addLast(20);
        list.addLast(30);
        list.addAtIndex(1, 15);
        
        list.display();
        
        list.removeFirst();
        list.removeLast();
        list.removeAtIndex(1);
        
        list.display();
    }
    
}
