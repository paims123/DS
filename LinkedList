package testlinkedlist;

class Node<E>{
    E element;
    Node<E> next;
    
    public Node(){
        this(null, null);
    }
    
    public Node(E element){
        this(element, null);
    }
    
    public Node(E element, Node<E> next){
        this.element=element;
        this.next=next;
    }
}

class MyLinkedList<E>{
    private Node<E> head;
    private Node<E> tail;
    private int size;
    
    public MyLinkedList(){
        head = tail = null;
        size = 0;
    }
    
    public void addFirst(E e){
        Node<E> newNode = new Node<>(e);
        newNode.next=head;
        head=newNode;
        if(tail==null) tail=head;
        size++;
    }
    
    public void addLast(E e){
        Node<E> newNode = new Node<>(e);
        if(tail==null){
            head=tail=newNode;
        }else{
            tail.next=newNode;
            tail=newNode;
        }
        size++;
    }
    
    public void add(int index, E e){
        if (index ==0 ) addFirst(e);
        else if (index>=size) addLast(e);
        else{
            Node<E> current = head;
            for(int i = 1; i < index; i++){
                current=current.next;
            }
            Node<E> temp = current.next;
            current.next=new Node<>(e, temp);
            size++;
        }
    }
    
    public E removeFirst(){
        if(size==0) return null;
        Node<E> temp = head;
        head=head.next;
        size--;
        if(head==null)tail=null;
        return temp.element;
    }
    
    public E removeLast(){
        if(size==0)return null;
        if(size==1){
            E temp = head.element;
            head=tail=null;
            size=0;
            return temp;
        }
        Node<E> current=head;
        while(current.next!=tail){
            current=current.next;
        }
        E temp=tail.element;
        tail=current;
        tail.next=null;
        size--;
        return temp;
    }
    
    public E remove(int index){
        if(index<0||index>=size)return null;
        if(index==0)return removeFirst();
        if(index==size-1)return removeLast();
        
        Node<E> previous = head;
        for(int i=1; i<index; i++){
            previous=previous.next;
        }
        Node<E> current=previous.next;
        previous.next=current.next;
        size--;
        return current.element;
    }
    
    public boolean contains(E e){
        Node<E> current=head;
        while(current!=null){
            if(current.element.equals(e))return true;
            current=current.next;
        }
        return false;
    }
    public E get(int index){
        if(index<0||index>=size)return null;
        Node<E> current=head;
        for(int i=0; i<index; i++){
            current=current.next;
        }
        return current.element;
    }
    
    public E getFirst(){
        return(head!=null)? head.element : null;
    }
    
    public E getLast(){
        return(tail!=null)? tail.element : null;
    }
    
    public int indexOf(E e){
        Node<E> current=head;
        int index=0;
        while(current!=null){
            if(current.element.equals(e))return index;
            current=current.next;
            index++;  
        }
        return -1;
    }
    
    public int lastIndexOf(E e){
        Node<E> current=head;
        int index=0, result=-1;
        while(current!=null){
            if(current.element.equals(e))result=index;
            current=current.next;
            index++;
        }
        return result;
    }
    
    public E set(int index, E e){
        if(index<0||index>=size)return null;
        Node<E> current = head;
        for(int i=0; i<index; i++){
            current=current.next;
        }
        E old = current.element;
        current.element=e;
        return old;
    }
    
    public void clear(){
        head = tail= null;
        size=0;
    }
    
    public void print(){
        Node<E>current=head;
        while(current!=null){
            System.out.println(current.element+ " ");
            current=current.next;
        }
        System.out.println();
    }
    
    public void reverse(){
        reversePrint(head);
        System.out.println();
    }
    
    public void reversePrint(Node<E> node){
        if(node==null)return;
        reversePrint(node.next);
        System.out.print(node.element + " ");
    }
    
    public int size(){
        return size;
    }
    
    public E getMiddleValue(){
        if(head==null)return null;
        Node<E> slow=head, fast=head;
        while(fast!=null&&fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow.element;
    }
    
}

public class TestLinkedList {

    public static void main(String[] args) {
        MyLinkedList<String> list = new MyLinkedList<>();
        
        list.addLast("a");
        list.addLast("b");
        list.addLast("c");
        list.addLast("d");
        list.addLast("e");
        
        System.out.print("List: ");
        list.print();
        
        System.out.print("Reversed: ");
        list.reverse();
        
        System.out.println("Size: "+ list.size());
        
        System.out.println("First: "+ list.getFirst());
        System.out.println("Last: "+ list.getLast());
        
        System.out.println("Removed: "+ list.remove(2));
        list.print();
        
        System.out.println("Index of b: "+ list.indexOf("b"));
        System.out.println("Index of d: "+ list.indexOf("d"));
        
        System.out.println("Contains 'c': "+ list.contains("c"));
        
        list.set(0, "j");
        list.set(1, "a");
        list.set(2, "v");
        list.set(3, "a");
        list.print();
        
        System.out.println("Middle value: "+ list.getMiddleValue());
    }
    
}
