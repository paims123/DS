package CircularQueue;

class CircularQ<E>{
    private E[] data;
    private int front, rear, size, capacity;
    
    public CircularQ(int capacity){
        this.capacity=capacity;
        data=(E[])new Object[capacity];
        front=rear=-1;
        size=0;
    }
    
    public boolean isFull(){
        return size==capacity;
    }
    
    public boolean isEmpty(){
        return size==0;
    }
    
    public void enqueue(E element){
        if(isFull()){
            System.out.println("Queue is full");
        }
        if(isEmpty()){
            front=0;
        }
        rear=(rear+1)%capacity;
        data[rear]=element;
        size++;
    }
    
    public E dequeue(){
        if(isEmpty()){
            System.out.println("Queue is empty");
            return null;
        }
        E removed=data[front];
        front=(front+1)%capacity;
        size--;
        if(size==0){
            front=rear=-1;
        }
        return removed;
    }
    public E peek(){
        if(isEmpty())return null;
        return data[front];
    }
    public void display(){
        if(isEmpty()){
            System.out.println("Queue is empty");
            return;
        }
        System.out.print("Queue: ");
        for(int i=0; i<size; i++){
            System.out.print(data[(front+i)%capacity]+ " ");
        }
        System.out.println();
    }
}

public class CircularQueue {

    public static void main(String[] args) {
        CircularQ<String> cq = new CircularQ<>(5);
        cq.enqueue("A");
        cq.enqueue("B");
        cq.enqueue("C");
        cq.display();
        cq.dequeue();
        cq.display();
    }
    
}
