package arraybagdemo;

import java.util.Arrays;

interface BagInterface<T> {
    int getCurrentSize();
    boolean isFull();
    boolean isEmpty();
    boolean add(T newEntry);
    T remove();
    boolean remove(T anEntry);
    void clear();
    int getFrequencyOf(T anEntry);
    boolean contains(T anEntry);
    T[] toArray();
    BagInterface<T> union(BagInterface<T> otherBag);
    BagInterface<T> intersection(BagInterface<T> otherBag);
    BagInterface<T> difference(BagInterface<T> otherBag);
}

class ArrayBag<T> implements BagInterface<T> {
    private final T[] bag;
    private int numberOfEntries;
    private static final int DEFAULT_CAPACITY = 25;

    @SuppressWarnings("unchecked")
    public ArrayBag() {
        bag = (T[]) new Object[DEFAULT_CAPACITY];
        numberOfEntries = 0;
    }

    @Override
    public int getCurrentSize() {
        return numberOfEntries;
    }

    @Override
    public boolean isFull() {
        return numberOfEntries == bag.length;
    }

    @Override
    public boolean isEmpty() {
        return numberOfEntries == 0;
    }

    @Override
    public boolean add(T newEntry) {
        if (isFull()) return false;
        bag[numberOfEntries++] = newEntry;
        return true;
    }

    @Override
    public T remove() {
        if (isEmpty()) return null;
        T result = bag[numberOfEntries - 1];
        bag[numberOfEntries - 1] = null;
        numberOfEntries--;
        return result;
    }

    @Override
    public boolean remove(T anEntry) {
        for (int i = 0; i < numberOfEntries; i++) {
            if (bag[i].equals(anEntry)) {
                bag[i] = bag[numberOfEntries - 1];
                bag[numberOfEntries - 1] = null;
                numberOfEntries--;
                return true;
            }
        }
        return false;
    }

    @Override
    public void clear() {
        while (!isEmpty()) {
            remove();
        }
    }

    @Override
    public int getFrequencyOf(T anEntry) {
        int count = 0;
        for (int i = 0; i < numberOfEntries; i++) {
            if (bag[i].equals(anEntry)) {
                count++;
            }
        }
        return count;
    }

    @Override
    public boolean contains(T anEntry) {
        return getFrequencyOf(anEntry) > 0;
    }

    @Override
    public T[] toArray() {
        return Arrays.copyOf(bag, numberOfEntries);
    }

    @Override
    public BagInterface<T> union(BagInterface<T> otherBag) {
        BagInterface<T> result = new ArrayBag<>();
        for (T item : this.toArray()) result.add(item);
        for (T item : otherBag.toArray()) result.add(item);
        return result;
    }

    @Override
    public BagInterface<T> intersection(BagInterface<T> otherBag) {
        BagInterface<T> result = new ArrayBag<>();
        BagInterface<T> copyOfOther = new ArrayBag<>();

        for (T item : otherBag.toArray()) copyOfOther.add(item);

        for (T item : this.toArray()) {
            if (copyOfOther.contains(item)) {
                result.add(item);
                copyOfOther.remove(item);
            }
        }
        return result;
    }

    @Override
    public BagInterface<T> difference(BagInterface<T> otherBag) {
        BagInterface<T> result = new ArrayBag<>();
        BagInterface<T> copyOfOther = new ArrayBag<>();

        for (T item : otherBag.toArray()) copyOfOther.add(item);
        for (T item : this.toArray()) {
            if (!copyOfOther.remove(item)) {
                result.add(item);
            }
        }
        return result;
    }
}

public class ArrayBagDemo {
    
    public static void main(String[] args) {
        BagInterface<String> bag1 = new ArrayBag<>();
        BagInterface<String> bag2 = new ArrayBag<>();

        String[] contentsOfBag1 = {"A", "A", "B", "A", "C", "A"};
        String[] contentsOfBag2 = {"A", "B", "A", "C", "B", "C", "D", "another string"};

        System.out.println("bag1:");
        testAdd(bag1, contentsOfBag1);
        displayBag(bag1);

        System.out.println("bag2:");
        testAdd(bag2, contentsOfBag2);
        displayBag(bag2);

        BagInterface<String> bag3 = bag1.union(bag2);
        System.out.println("bag3, test the method union of bag1 and bag2:");
        displayBag(bag3);

        BagInterface<String> bag4 = bag1.intersection(bag2);
        System.out.println("bag4, test the method intersection of bag1 and bag2:");
        displayBag(bag4);

        BagInterface<String> bag5 = bag1.difference(bag2);
        System.out.println("bag5, test the method difference of bag1 and bag2:");
        displayBag(bag5);
    }

    private static void testAdd(BagInterface<String> aBag, String[] content) {
        System.out.print("Adding ");
        for (String item : content) {
            aBag.add(item);
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void displayBag(BagInterface<String> aBag) {
        System.out.println("The bag contains " + aBag.getCurrentSize() + " string(s), as follows:");
        for (Object item : aBag.toArray()) {
            System.out.print(item + " ");
        }
        System.out.println("\n");
    }
}
